import { BN, Program } from '@coral-xyz/anchor';
import { PublicKey } from '@solana/web3.js';

// ===== PROGRAM TYPE DEFINITIONS =====

// These would normally be generated by `anchor build`
// For now, we'll define them manually

export interface FeeRewardsProgram {
  rpc: {
    initializeRewardsPool: (dayId: BN) => Promise<string>;
    recordTradeFee: (feeAmount: BN) => Promise<string>;
    claimRewards: (userTokenBalance: BN, totalSupply: BN) => Promise<string>;
  };
  account: {
    rewardsPool: {
      fetch: (address: PublicKey) => Promise<RewardsPoolAccount>;
    };
    claimRecord: {
      fetch: (address: PublicKey) => Promise<ClaimRecordAccount>;
    };
  };
}

export interface HolderDistributionProgram {
  rpc: {
    initializeDistribution: (totalDistribution: BN) => Promise<string>;
    claimLp: (userTokenBalance: BN, totalSupplyAtSnapshot: BN) => Promise<string>;
  };
  account: {
    distributionState: {
      fetch: (address: PublicKey) => Promise<DistributionStateAccount>;
    };
    claimRecord: {
      fetch: (address: PublicKey) => Promise<ClaimRecordAccount>;
    };
  };
}

export interface LPCustodyProgram {
  rpc: {
    initializeLpVault: () => Promise<string>;
    depositLp: (amount: BN) => Promise<string>;
    liquidateDeadToken: () => Promise<string>;
  };
  account: {
    lpVault: {
      fetch: (address: PublicKey) => Promise<LPVaultAccount>;
    };
  };
}

export interface ProjectStatusTrackerProgram {
  rpc: {
    initializeTracker: () => Promise<string>;
    updateStats: (volumeDelta: BN, currentPrice: BN) => Promise<string>;
    checkAndFlagDead: () => Promise<string>;
  };
  account: {
    projectTracker: {
      fetch: (address: PublicKey) => Promise<ProjectTrackerAccount>;
    };
  };
}

// ===== ACCOUNT TYPES =====

export interface RewardsPoolAccount {
  dayId: BN;
  totalRewards: BN;
  totalVolume: BN;
  bump: number;
}

export interface ClaimRecordAccount {
  claimed: boolean;
  amount: BN;
  claimTime?: BN;
}

export interface DistributionStateAccount {
  tokenMint: PublicKey;
  totalLp: BN;
  claimedLp: BN;
  snapshotTime: BN;
  bump: number;
}

export interface LPVaultAccount {
  tokenMint: PublicKey;
  totalLp: BN;
  isActive: boolean;
  bump: number;
}

export interface ProjectTrackerAccount {
  tokenMint: PublicKey;
  launchTime: BN;
  lastTradeTs: BN;
  volume3d: BN;
  athPrice: BN;
  currentPrice: BN;
  status: { [key: string]: {} }; // Enum representation
  bump: number;
}

// ===== INSTRUCTION ACCOUNT CONTEXTS =====

export interface InitializeRewardsPoolAccounts {
  rewardsPool: PublicKey;
  payer: PublicKey;
  systemProgram: PublicKey;
}

export interface ClaimRewardsAccounts {
  rewardsPool: PublicKey;
  user: PublicKey;
  claimRecord: PublicKey;
  systemProgram: PublicKey;
}

export interface InitializeDistributionAccounts {
  distributionState: PublicKey;
  tokenMint: PublicKey;
  payer: PublicKey;
  systemProgram: PublicKey;
}

export interface ClaimLPAccounts {
  distributionState: PublicKey;
  tokenMint: PublicKey;
  vaultTokenAccount: PublicKey;
  userTokenAccount: PublicKey;
  userClaimRecord: PublicKey;
  user: PublicKey;
  tokenProgram: PublicKey;
  systemProgram: PublicKey;
}

export interface InitializeLPVaultAccounts {
  lpVault: PublicKey;
  tokenMint: PublicKey;
  payer: PublicKey;
  systemProgram: PublicKey;
}

export interface DepositLPAccounts {
  lpVault: PublicKey;
  tokenMint: PublicKey;
  from: PublicKey;
  fromTokenAccount: PublicKey;
  vaultTokenAccount: PublicKey;
  tokenProgram: PublicKey;
}

export interface LiquidateLPAccounts {
  lpVault: PublicKey;
  tokenMint: PublicKey;
  vaultTokenAccount: PublicKey;
  platformVault: PublicKey;
  distributionVault: PublicKey;
  tracker: PublicKey;
  distributionState: PublicKey;
  tokenProgram: PublicKey;
  systemProgram: PublicKey;
  payer: PublicKey;
  holderProgram: PublicKey;
}

export interface InitializeTrackerAccounts {
  tracker: PublicKey;
  tokenMint: PublicKey;
  payer: PublicKey;
  systemProgram: PublicKey;
}

export interface UpdateStatsAccounts {
  tracker: PublicKey;
  tokenMint: PublicKey;
}

export interface CheckAndFlagDeadAccounts {
  tracker: PublicKey;
  tokenMint: PublicKey;
}

// ===== PROGRAM INSTRUCTIONS =====

export interface ProgramInstruction {
  programId: PublicKey;
  accounts: Array<{
    pubkey: PublicKey;
    isSigner: boolean;
    isWritable: boolean;
  }>;
  data: Buffer;
}

// ===== ERROR CODES =====

export enum FeeRewardErrorCode {
  AlreadyClaimed = 6000,
}

export enum HolderDistributionErrorCode {
  AlreadyClaimed = 6000,
  NothingToClaim = 6001,
  AllRewardsClaimed = 6002,
}

export enum LPCustodyErrorCode {
  TokenIsDead = 6000,
  TokenStillActive = 6001,
}

// ===== PROGRAM CONSTANTS =====

export const PROGRAM_SEEDS = {
  REWARDS_POOL: 'reward',
  DISTRIBUTION_STATE: 'dist',
  LP_VAULT: 'vault',
  PROJECT_TRACKER: 'tracker',
  CLAIM_RECORD: 'claim',
} as const;

export const ACCOUNT_SIZES = {
  REWARDS_POOL: 64,
  DISTRIBUTION_STATE: 64,
  LP_VAULT: 64,
  PROJECT_TRACKER: 128,
  CLAIM_RECORD: 32,
} as const;

// ===== UTILITY TYPES =====

export type ProgramAccount<T> = {
  publicKey: PublicKey;
  account: T;
};

export type ProgramAccounts<T> = Array<ProgramAccount<T>>;

// ===== ANCHOR PROVIDER TYPES =====

export interface AnchorWallet {
  publicKey: PublicKey;
  signTransaction: (transaction: any) => Promise<any>;
  signAllTransactions: (transactions: any[]) => Promise<any[]>;
}

export interface ProgramContextValue {
  feeRewardsProgram: Program | null;
  holderDistributionProgram: Program | null;
  lpCustodyProgram: Program | null;
  projectTrackerProgram: Program | null;
  loading: boolean;
  error: string | null;
}